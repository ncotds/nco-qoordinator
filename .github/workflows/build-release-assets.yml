---
name: Build

on:
  release:
    types:
      - published

concurrency:
  group: build-release-assets
  cancel-in-progress: false

env:
  GO_VERSION: '1.22'

jobs:
  build-ncoq-api-binaries:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos:
          - 'linux'
          - 'windows'
        goarch:
          - 'amd64'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install dependencies
        run: make setup-tools

      - name: Build ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          DIST_DIR: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}
        run: |
          mkdir $DIST_DIR
          CGO_ENABLED=0 go build -ldflags="-s -w -X='main.version=${{ github.ref_name }}'" -o $DIST_DIR/ncoq-api ./cmd/ncoq-api/...

      - name: Archive build for Windows
        if: ${{ matrix.goos == 'windows' }}
        env:
          DIST_DIR: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}
        run: |
          cp config/example.yml ${DIST_DIR}/config.yml
          mv $DIST_DIR/ncoq-api ${DIST_DIR}/ncoq-api.exe
          zip -r ${DIST_DIR}.zip ${DIST_DIR}
          ls -lh ${DIST_DIR}.zip

      - name: Archive build
        if: ${{ matrix.goos != 'windows' }}
        env:
          GOOS: ${{ matrix.goos }}
          DIST_DIR: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}
        run: |
          cp config/example.yml ${DIST_DIR}/config.yml
          test $GOOS = "linux" && cp docs/deploy-systemd/* ${DIST_DIR}/
          tar czvf ${DIST_DIR}.tgz ${DIST_DIR}
          ls -lh ${DIST_DIR}.tgz

      - name: Upload release assets Windows
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.goos == 'windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_name: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_content_type: application/zip

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.goos != 'windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}.tgz
          asset_name: ncoq-api-${{ matrix.goos }}-${{ matrix.goarch }}.tgz
          asset_content_type: application/gzip

  build-ncoq-api-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          file: ./docs/deploy-docker/Dockerfile
          target: app
          tags: |
            ghcr.io/${{ github.repository}}:${{ github.ref_name }}
            ghcr.io/${{ github.repository}}:latest
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            VERSION=${{ github.ref_name }}
